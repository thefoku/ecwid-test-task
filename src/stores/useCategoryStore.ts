import type { EcwidCategory } from '@/types/ecwid'
import { useCategories } from '@/api/categoryService'
import { defineStore } from 'pinia'
import { ref } from 'vue'

export const useCategoryStore = defineStore('category', () => {
  const { fetchCategories } = useCategories()

  const categories = ref<EcwidCategory[]>([])
  const allCategories = ref<EcwidCategory[]>([])
  const categoriesByParent = ref<Record<number, EcwidCategory[]>>({})
  const loading = ref(false)

  async function loadCategories(parentId?: number): Promise<EcwidCategory[] | undefined> {
    if (categories.value.length > 0) return

    loading.value = true

    try {
      const data = await fetchCategories(parentId)
      allCategories.value = data.items
      categories.value = allCategories.value.filter((category) => category.parentId === parentId)
      if (parentId === null) {
        categories.value = allCategories.value.filter((category) => !category.parentId)
      }

      return data.items
    } catch (error) {
      console.error('Error when fetching categories:', error)
      throw error
    } finally {
      loading.value = false
    }
  }

  function getCategoriesBySlug(slug: string): EcwidCategory[] | undefined {
    const parentId = getCategoryIdBySlug(slug)
    const categoriesByParent = allCategories.value.filter((cat) => cat.parentId === parentId)
    return categoriesByParent.length > 0 ? categoriesByParent : undefined
  }

  function getCategoryIdBySlug(slug: string): number | undefined {
    return getCategoryBySlug(slug)?.id
  }

  function getCategoryNameBySlug(slug: string): string {
    return getCategoryBySlug(slug)?.name || 'Catalog'
  }

  function getCategoryBySlug(slug: string): EcwidCategory | undefined {
    return allCategories.value.find((cat) => cat.autogeneratedSlug === slug)
  }

  function getBreadcrumbPathBySlug(slug: string): EcwidCategory[] {
    const category = getCategoryBySlug(slug)
    if (!category) return []

    const path: EcwidCategory[] = []
    let currentCategory = category

    while (currentCategory) {
      path.unshift(currentCategory)

      const parentId = currentCategory.parentId
      if (!parentId || parentId === 0) break

      const parent = Object.values(allCategories.value)
        .flat()
        .find((it) => it.id === parentId)

      if (!parent) break

      currentCategory = parent
    }
    return path
  }

  return {
    categories,
    allCategories,
    categoriesByParent,
    loading,
    loadCategories,
    getCategoriesBySlug,
    getBreadcrumbPathBySlug,
    getCategoryIdBySlug,
    getCategoryBySlug,
    getCategoryNameBySlug,
  }
})
